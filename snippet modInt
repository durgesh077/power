vector<long long>_inv{1,1};
template<int M=1000000007,int N=0>
struct modInt
{
    long long val=0;
    modInt()
    {
        val=0;
        if(_inv.size()<=N)
        {
            int from=_inv.size();
            _inv.resize(N+1);
            for(int i=from;i<=N;i++)
            {
                _inv[i]=M-M/i*_inv[M%i]%M;
            }
        }
    }
    modInt(long long a)
    {
        val=(a)%M;
        val=(val+M)%M;
        if(_inv.size()<=N)
        {
            int from=_inv.size();
            _inv.resize(N+1);
            for(int i=from;i<=N;i++)
            {
                _inv[i]=M-M/i*_inv[M%i]%M;
            }
        }
    }
    void operator=(long long a){val=(a)%M;val=(val+M)%M;}
    long long& operator*(){return val;}
    modInt operator+(modInt b){return val+b.val;}
    modInt operator-(modInt b){return val-b.val;}
    modInt operator*(modInt b){return val*b.val;}
    modInt operator/(modInt b){return (b<=N)?val*_inv[b.val]:(b^(M-2))*val;}
    explicit operator bool(){return bool(val);}
    bool operator==(modInt b)const{return val==b.val;}
    bool operator>(modInt b)const{return val>b.val;}
    bool operator<(modInt b)const{return val<b.val;}
    bool operator<=(modInt b)const{return val<=b.val;}
    bool operator>=(modInt b)const{return val>=b.val;}
    modInt operator++(){return *this=*this+1;}
    modInt operator--(){return *this=*this-1;}
    modInt operator++(int){auto tmp=*this; *this=*this+1;return tmp;}
    modInt operator--(int){auto tmp=*this; *this=*this-1;return tmp;}
    void operator+=(modInt a){*this=*this+a;}
    void operator-=(modInt a){*this=*this-a;}
    void operator*=(modInt a){*this=*this*a;}
    void operator/=(modInt a){*this=*this/a;}
    modInt operator^(modInt a)
    {
        if(a==0)
        {
            return 1;
        }
        modInt p=*this^(a.val/2);
        if(a.val%2==1)
            return p*p*val;
        else
            return p*p;
    }
    friend ostream& operator<<(ostream & os,modInt  a){return os<<a.val;}
    friend istream& operator>>(istream& is,modInt &a)
    {
    long long tm;
    is>>tm;
    a=tm;
    return is;
    }
};
